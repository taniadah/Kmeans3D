package kmeans3d;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.awt.geom.*;
import java.io.*;
import java.lang.*;
import java.math.BigDecimal;
import java.math.RoundingMode;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author tania
 */
public class Interfaz extends javax.swing.JFrame {
  
    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
        getContentPane().setBackground(new Color(204,204,255));
        num(jtfNumPuntos);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPasswordField1 = new javax.swing.JPasswordField();
        jCheckBox1 = new javax.swing.JCheckBox();
        p1 = new javax.swing.JPanel();
        lblNumPuntos = new javax.swing.JLabel();
        lblIngrese = new javax.swing.JLabel();
        jtfNumPuntos = new javax.swing.JTextField();
        btnGenPuntos = new javax.swing.JButton();
        plot3DPanel1 = new org.math.plot.Plot3DPanel();
        p3 = new javax.swing.JPanel();
        btnLimpia = new javax.swing.JButton();
        lblKClass = new javax.swing.JLabel();
        jtfNumClases = new javax.swing.JTextField();
        lblX = new javax.swing.JLabel();
        jtfX = new javax.swing.JTextField();
        lblY = new javax.swing.JLabel();
        lblZ = new javax.swing.JLabel();
        jtfY = new javax.swing.JTextField();
        jtfZ = new javax.swing.JTextField();
        btnAnadir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnAleatorio = new javax.swing.JButton();
        jcbDistancia = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        btnInicio = new javax.swing.JButton();
        btnOk = new javax.swing.JButton();
        textArea1 = new java.awt.TextArea();
        btnAnterior = new javax.swing.JButton();
        btnSiguiente = new javax.swing.JButton();

        jPasswordField1.setText("jPasswordField1");

        jCheckBox1.setText("jCheckBox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setForeground(new java.awt.Color(204, 204, 255));

        p1.setBackground(new java.awt.Color(0, 51, 102));
        p1.setForeground(new java.awt.Color(255, 255, 255));

        lblNumPuntos.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        lblNumPuntos.setForeground(new java.awt.Color(255, 255, 255));
        lblNumPuntos.setText("Numero de puntos: ");

        lblIngrese.setBackground(new java.awt.Color(51, 51, 51));
        lblIngrese.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 14)); // NOI18N
        lblIngrese.setForeground(new java.awt.Color(255, 255, 255));
        lblIngrese.setText("Ingrese los datos para iniciar el algoritmo");

        jtfNumPuntos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfNumPuntosKeyReleased(evt);
            }
        });

        btnGenPuntos.setBackground(new java.awt.Color(153, 153, 255));
        btnGenPuntos.setText("Generar Puntos");
        btnGenPuntos.setEnabled(false);
        btnGenPuntos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenPuntosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout p1Layout = new javax.swing.GroupLayout(p1);
        p1.setLayout(p1Layout);
        p1Layout.setHorizontalGroup(
            p1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(lblIngrese)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(p1Layout.createSequentialGroup()
                .addGroup(p1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnGenPuntos)
                    .addGroup(p1Layout.createSequentialGroup()
                        .addComponent(lblNumPuntos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfNumPuntos, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        p1Layout.setVerticalGroup(
            p1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p1Layout.createSequentialGroup()
                .addComponent(lblIngrese)
                .addGap(18, 18, 18)
                .addGroup(p1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNumPuntos)
                    .addComponent(jtfNumPuntos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGenPuntos)
                .addContainerGap())
        );

        p3.setBackground(new java.awt.Color(0, 51, 102));
        p3.setForeground(new java.awt.Color(255, 255, 255));

        btnLimpia.setBackground(new java.awt.Color(153, 153, 255));
        btnLimpia.setText("Limpiar");
        btnLimpia.setEnabled(false);
        btnLimpia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiaActionPerformed(evt);
            }
        });

        lblKClass.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        lblKClass.setForeground(new java.awt.Color(255, 255, 255));
        lblKClass.setText("Clases #K");

        jtfNumClases.setEnabled(false);
        jtfNumClases.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfNumClasesKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtfNumClasesKeyTyped(evt);
            }
        });

        lblX.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        lblX.setForeground(new java.awt.Color(255, 255, 255));
        lblX.setText("X:");

        jtfX.setEnabled(false);
        jtfX.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfXKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtfXKeyTyped(evt);
            }
        });

        lblY.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        lblY.setForeground(new java.awt.Color(255, 255, 255));
        lblY.setText("Y:");

        lblZ.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        lblZ.setForeground(new java.awt.Color(255, 255, 255));
        lblZ.setText("Z: ");

        jtfY.setEnabled(false);
        jtfY.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfYKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtfYKeyTyped(evt);
            }
        });

        jtfZ.setToolTipText("");
        jtfZ.setEnabled(false);
        jtfZ.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfZKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtfZKeyTyped(evt);
            }
        });

        btnAnadir.setBackground(new java.awt.Color(153, 153, 255));
        btnAnadir.setText("Agregar");
        btnAnadir.setEnabled(false);
        btnAnadir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnAnadirMousePressed(evt);
            }
        });
        btnAnadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnadirActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Agregue Atractores");

        btnAleatorio.setBackground(new java.awt.Color(153, 153, 255));
        btnAleatorio.setText("Aleatorios");
        btnAleatorio.setEnabled(false);
        btnAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAleatorioActionPerformed(evt);
            }
        });

        jcbDistancia.setBackground(new java.awt.Color(204, 204, 204));
        jcbDistancia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Euclidiana", "Manhattan", "Minkowski", "Chebyshev" }));

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Forma de medir la distancia");

        btnInicio.setBackground(new java.awt.Color(153, 153, 255));
        btnInicio.setText("Inicio");
        btnInicio.setEnabled(false);
        btnInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInicioActionPerformed(evt);
            }
        });

        btnOk.setBackground(new java.awt.Color(153, 153, 255));
        btnOk.setText("OK");
        btnOk.setEnabled(false);
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        textArea1.setBackground(new java.awt.Color(204, 204, 255));
        textArea1.setEditable(false);
        textArea1.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        textArea1.setForeground(new java.awt.Color(0, 51, 153));

        javax.swing.GroupLayout p3Layout = new javax.swing.GroupLayout(p3);
        p3.setLayout(p3Layout);
        p3Layout.setHorizontalGroup(
            p3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p3Layout.createSequentialGroup()
                .addComponent(lblKClass)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(p3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(p3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel1))
                    .addGroup(p3Layout.createSequentialGroup()
                        .addComponent(jtfNumClases, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(btnOk)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(p3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(p3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(p3Layout.createSequentialGroup()
                        .addGroup(p3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(p3Layout.createSequentialGroup()
                                .addGroup(p3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p3Layout.createSequentialGroup()
                                        .addComponent(lblY)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p3Layout.createSequentialGroup()
                                        .addComponent(lblZ)
                                        .addGap(1, 1, 1)))
                                .addGroup(p3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jtfY, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                                    .addComponent(jtfZ)))
                            .addGroup(p3Layout.createSequentialGroup()
                                .addComponent(lblX)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfX, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGroup(p3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(p3Layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(btnInicio))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p3Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(p3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAleatorio, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnAnadir, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addContainerGap())
                    .addGroup(p3Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(p3Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(p3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnLimpia)
                    .addComponent(jcbDistancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(p3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textArea1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        p3Layout.setVerticalGroup(
            p3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(p3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKClass)
                    .addComponent(jtfNumClases, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOk))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(14, 14, 14)
                .addGroup(p3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblX)
                    .addComponent(jtfX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAleatorio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(p3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblY)
                    .addComponent(btnAnadir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(p3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblZ)
                    .addComponent(btnInicio))
                .addGap(15, 15, 15)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jcbDistancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textArea1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimpia)
                .addContainerGap())
        );

        btnAnterior.setBackground(new java.awt.Color(153, 153, 255));
        btnAnterior.setText("Anterior");
        btnAnterior.setEnabled(false);
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });

        btnSiguiente.setBackground(new java.awt.Color(153, 153, 255));
        btnSiguiente.setText("Siguiente");
        btnSiguiente.setEnabled(false);
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(p1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(p3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(plot3DPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(btnAnterior)
                        .addGap(48, 48, 48)
                        .addComponent(btnSiguiente)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(p1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(p3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(plot3DPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAnterior)
                    .addComponent(btnSiguiente))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void num(JTextField a){
      a.addKeyListener(new KeyAdapter(){
        public void keyTyped(KeyEvent e){
          char c = e.getKeyChar();
          if(jtfNumPuntos.getText().startsWith("0")){
              e.consume();
          }
          if (!Character.isDigit(c)) {
            e.consume();
          }
          if(c == '.' && jtfNumPuntos.getText().contains(".")){
            e.consume();
          }
        }
      });
    }

    public static void crearPuntosLog(){
      Random random = new Random();
      x = new double[numPuntos];
      y = new double[numPuntos];
      z = new double[numPuntos];
      double xa, ya, za;
      System.out.println(xmin+" "+xmax);
      for(int i = 0; i < numPuntos; i++){
        xa = (xmin + (random.nextDouble() * (xmax - xmin)));
        BigDecimal bd = new BigDecimal(xa).setScale(2, RoundingMode.HALF_UP);
        xa = bd.doubleValue();
        ya = (ymin + (random.nextDouble() * (ymax - ymin)));
        bd = new BigDecimal(ya).setScale(2, RoundingMode.HALF_UP);
        ya = bd.doubleValue();
        za = (zmin + (random.nextDouble() * (zmax - zmin)));
        bd = new BigDecimal(za).setScale(2, RoundingMode.HALF_UP);
        za = bd.doubleValue();
        x[i] = xa;
        y[i] = ya;
        z[i] = za;

        //System.out.println(xa);
      }
    }

    public void graficarPuntos(){
      if(numPuntos>30000){
        double[] auxX, auxY, auxZ;
        auxX = new double[50000];
        auxY = new double[50000];
        auxZ = new double[50000];
        for(int i = 0; i<30000; i++){
            auxX[i] = x[i];
            auxY[i] = y[i];
            auxZ[i] = z[i];           
        }
         plot3DPanel1.addScatterPlot("Datos",colAct,auxX, auxY, auxZ);
          
      }else
        plot3DPanel1.addScatterPlot("Datos",colAct,x, y, z);
    }

    public static void graficarPuntosClasificados(double[] xC, double[] yC, double[] zC){
      plot3DPanel1.addScatterPlot("",colAct,xC, yC, zC);
    }

    private void generaColoresAleat(){
      Random random = new Random();
      colores = new ArrayList<Color>();
      int r,g,b;
      Color aux;
      for(int i = 0; i<k ; i++){
        r = random.nextInt(255);
        g = random.nextInt(255);
        b = random.nextInt(255);
        aux = new Color(r,g,b);
        colores.add(aux);
      }
    }

    public static void graficaAtractores(){
        double [] xaux,yaux, zaux;
        xaux = new double[1];
        yaux = new double[1];
        zaux = new double[1];
        
        for(int i = 0; i<atractores.size(); i++){
            xaux[0] = atractores.get(i).getX();
            yaux[0] = atractores.get(i).getY();
            zaux[0] = atractores.get(i).getZ();
            //plot3DPanel1.
            plot3DPanel1.addBarPlot("", colores.get(i), xaux, yaux, zaux);
        }
        //plot3DPanel1.addBarPlot(name, colAct, x, y, z)               
    }
    public void actualiza(Graphics g){
        super.update(g);
 
    }
    
    public void graficaAtractor(double xA, double yA, double zA, int i){
       double [] xaux,yaux, zaux;
       xaux = new double[1];
       yaux = new double[1];
       zaux = new double[1];
       xaux[0] = xA;
       yaux[0] = yA;
       zaux[0] = zA;
            //plot3DPanel1.
       plot3DPanel1.addBarPlot("", colores.get(i), xaux, yaux, zaux);
    }

    private void generaAtractoresAleat(){
      Random random = new Random();
      atractores = new ArrayList<Point3D>();
      //x = new double[numPuntos];
      //y = new double[numPuntos];
      //z = new double[numPuntos];
      double xa, ya, za;
      System.out.println(xmin+" "+xmax);
      for(int i = 0; i <k; i++){
        xa = (xmin + (random.nextDouble() * (xmax - xmin)));
        xa = redDosDecimales(xa);
        ya = (ymin + (random.nextDouble() * (ymax - ymin)));
        ya = redDosDecimales(ya);
        za = (zmin + (random.nextDouble() * (zmax - zmin)));
        za = redDosDecimales(ya);
        Point3D p3d = new Point3D(xa,ya,za);
        atractores.add(p3d);
        //System.out.println(xa);
      }
    }
    public double redDosDecimales(double xa){
      BigDecimal bd = new BigDecimal(xa).setScale(2, RoundingMode.HALF_UP);
      xa = bd.doubleValue();
      return xa;
    }
    private void ponerMaxYmin(){
        String text =  "";
        text+= xmin+"<x<"+xmax+"\n";
        text+= ymin+"<y<"+ymax+"\n";
        text+= zmin+"<z<"+zmax+"\n";
        textArea1.setText(text);
    }
    private boolean compararAtractores(Point3D p){
        boolean esI = false;
        for(int i=0; i<atractores.size(); i++){
           esI = p.comparaPunto(atractores.get(i));
        }
        return esI;
    }

    private void btnGenPuntosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenPuntosActionPerformed
        // TODO add your handling code here:
        numPuntos = Integer.parseInt(jtfNumPuntos.getText());
        if(numPuntos==0){
            JOptionPane.showMessageDialog(null, "El numero de puntos no puede ser 0", "Error", JOptionPane.ERROR_MESSAGE);
        }else{
            //btnAleatorio.setEnabled(false);
            //btnInicio.setEnabled(true);
            btnGenPuntos.setEnabled(false);
            mp = new MedidasPlano(new JFrame(), true);
            mp.setVisible(true);
            crearPuntosLog();
            colAct = Color.BLACK;
            graficarPuntos();
            jtfNumClases.setEnabled(true);
            //btnElegir.setEnabled(false);
            jtfNumPuntos.setEnabled(false);
            btnLimpia.setEnabled(true);
            ponerMaxYmin();
            atractores = new ArrayList<Point3D>();
        }

    }//GEN-LAST:event_btnGenPuntosActionPerformed


    private void btnLimpiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiaActionPerformed
        // TODO add your handling code here:
        btnGenPuntos.setEnabled(true);
        btnAleatorio.setEnabled(false);
        //btnMan.setEnabled(false);
        btnInicio.setEnabled(false);
        btnLimpia.setEnabled(false);
        //jcbClases.removeAllItems();
        jtfNumPuntos.setText("");
        jtfNumClases.setText("");
        //
        jtfNumPuntos.setEnabled(true);
        plot3DPanel1.removeAllPlots();
        textArea1.setText("");
    }//GEN-LAST:event_btnLimpiaActionPerformed

    private void btnAnadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnadirActionPerformed
        // TODO add your handling code here:
        numPuntos = Integer.parseInt(jtfNumPuntos.getText());
        double xaux = Double.parseDouble(jtfX.getText());
        double yaux = Double.parseDouble(jtfY.getText());
        double zaux = Double.parseDouble(jtfZ.getText());
        //zmax = Double.parseDouble(jtfZmax.getText());
      //Si la persona no ingresa
        if(xaux< xmin || xaux>xmax || yaux< ymin || yaux>ymax || zaux< zmin || zaux > zmax){
            JOptionPane.showMessageDialog(null, "Verifique que el atractor este dentro de los limites", "Error", JOptionPane.ERROR_MESSAGE);
        }else{
            Point3D p3d = new Point3D(xaux, yaux, zaux);
            if(atractores.size()>0){
                boolean esIgual = compararAtractores(p3d);
                if(esIgual){
                    JOptionPane.showMessageDialog(null, "Ya se ha agregado ese atractor", "Error", JOptionPane.ERROR_MESSAGE);
                }else{
                    atractores.add(p3d);
                    graficaAtractor(xaux, yaux, zaux,comPuntos);
                    System.out.println("Seagrego");
                    comPuntos+=1;
                    if(comPuntos==k){
                        jtfX.setEnabled(false);
                        jtfY.setEnabled(false);
                        jtfZ.setEnabled(false);
                        btnInicio.setEnabled(true);
                        btnAleatorio.setEnabled(false);
                    }
                }
            }else{
               atractores.add(p3d);
               graficaAtractor(xaux, yaux, zaux,comPuntos);
               comPuntos+=1;
            }
            jtfX.setText("");
            jtfY.setText("");
            jtfZ.setText("");
            btnAnadir.setEnabled(false);
        }
    }//GEN-LAST:event_btnAnadirActionPerformed

    private void btnAleatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAleatorioActionPerformed
        // TODO add your handling code here:
        String aux = evt.getActionCommand();
        if(aux.equals("Aleatorios")){
            
            esAleat = true;
            btnAleatorio.setText("Manual");
            btnInicio.setEnabled(true);
            jtfX.setEnabled(false);
            jtfY.setEnabled(false);
            jtfZ.setEnabled(false);
            plot3DPanel1.removeAllPlots();
             //atractores = new ArrayList<Point3D>();
            graficarPuntos();
            generaAtractoresAleat();
            graficaAtractores();
            

            comPuntos = 0;
        }else{
            esAleat = false;
            jtfX.setEnabled(true);
            jtfY.setEnabled(true);
            jtfZ.setEnabled(true);
            btnAleatorio.setText("Aleatorios");
            plot3DPanel1.removeAllPlots();
            graficarPuntos();
            atractores = new ArrayList<Point3D>();

        }
    }//GEN-LAST:event_btnAleatorioActionPerformed

    private void jtfNumPuntosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfNumPuntosKeyReleased
        // TODO add your handling code here:
        boolean ver = false;
        if(jtfNumPuntos.getText().equals("")){
            ver = false;
        }else{
            ver = true;
        }

        btnGenPuntos.setEnabled(ver);
    }//GEN-LAST:event_jtfNumPuntosKeyReleased

    private void jtfXKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfXKeyReleased
        // TODO add your handling code here:
        boolean ver = false;
        if(jtfX.getText().equals("") || jtfY.getText().equals("") || jtfZ.getText().equals("")){
            ver = false;
        }else{
            ver = true;
        }
        btnAnadir.setEnabled(ver);
    }//GEN-LAST:event_jtfXKeyReleased

    private void jtfXKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfXKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != '.' && c!='-') {
            evt.consume();
        }
        if((c == '.' && jtfX.getText().contains("."))||(c == '-' && jtfX.getText().contains("-"))){
            evt.consume();
        }

    }//GEN-LAST:event_jtfXKeyTyped

    private void jtfYKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfYKeyReleased
        // TODO add your handling code here:
        boolean ver = false;
        if(jtfX.getText().equals("") || jtfY.getText().equals("") || jtfZ.getText().equals("")){
            ver = false;
        }else{
            ver = true;
        }
        btnAnadir.setEnabled(ver);
    }//GEN-LAST:event_jtfYKeyReleased

    private void jtfYKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfYKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != '.' && c!='-') {
            evt.consume();
        }
        if((c == '.' && jtfY.getText().contains(".")) ||(c == '-' && jtfY.getText().contains("-"))){
            evt.consume();
        }
    }//GEN-LAST:event_jtfYKeyTyped

    private void jtfZKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfZKeyReleased
        // TODO add your handling code here:
        boolean ver = false;
        if(jtfX.getText().equals("") || jtfY.getText().equals("") || jtfZ.getText().equals("")){
            ver = false;
        }else{
            ver = true;
        }
        btnAnadir.setEnabled(ver);
    }//GEN-LAST:event_jtfZKeyReleased

    private void jtfZKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfZKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != '.' && c!='-') {
            evt.consume();
        }
        if((c == '.' && jtfZ.getText().contains("."))|| (c == '-' && jtfZ.getText().contains("-"))){
            evt.consume();
        }
    }//GEN-LAST:event_jtfZKeyTyped

    private void btnInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInicioActionPerformed
        // TODO add your handling code here:
      System.out.println("Iniciando algoritmo");
      //graficaAtractores();
      
      btnLimpia.setEnabled(false);
      btnAnadir.setEnabled(false);
      btnInicio.setEnabled(false);
      kmeans3d = new KMeans3D(atractores, jcbDistancia.getSelectedItem().toString());
      kmeans3d.algoritmoKmeans();
      numIteraciones = kmeans3d.getNumIteraciones();
      atractoresTod = kmeans3d.todosAtrac;
      //kmeans3d.pintaPuntos2(numIteraciones);
      btnAnterior.setEnabled(true);
      btnLimpia.setEnabled(true);
      


    }//GEN-LAST:event_btnInicioActionPerformed

    private void jtfNumClasesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfNumClasesKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) || (Character.isDigit(c) &&jtfNumClases.getText().startsWith("0"))) {
            evt.consume();
        }
        if(c == '.' && jtfNumClases.getText().contains(".")){
            evt.consume();
        }
    }//GEN-LAST:event_jtfNumClasesKeyTyped

    private void btnAnadirMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAnadirMousePressed
        // TODO add your handling code here:
        System.out.println("Se ha presionado");
    }//GEN-LAST:event_btnAnadirMousePressed

    private void jtfNumClasesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfNumClasesKeyReleased
        // TODO add your handling code here:
        boolean ver = false;
        if(jtfNumClases.getText().equals("")){
            ver = false;
        }else{
            ver = true;
        }
        btnOk.setEnabled(ver);
    }//GEN-LAST:event_jtfNumClasesKeyReleased

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        // TODO add your handling code here:
        k = Integer.parseInt(jtfNumClases.getText());
        if(k<2){
            JOptionPane.showMessageDialog(null, "El numero de clases debe ser minimo 2", "Error", JOptionPane.ERROR_MESSAGE);
        }else if(k>numPuntos){
            JOptionPane.showMessageDialog(null, "Excede el numero de clases", "Error", JOptionPane.ERROR_MESSAGE);
        }else{
            jtfNumClases.setEnabled(false);
            btnAleatorio.setEnabled(true);
            jtfX.setEnabled(true);
            jtfY.setEnabled(true);
            jtfZ.setEnabled(true);
            generaColoresAleat();
            btnOk.setEnabled(false);
        }

    }//GEN-LAST:event_btnOkActionPerformed
    
    private void agregAtractTempo(){
         atractoresTem = new ArrayList<Point3D>();
         int ini = (numIteraciones * k)-k;         
         int fin = numIteraciones * k;
         System.out.println("inicio: "+ini+"   fin: "+fin);
         for(int i = ini; i<fin; i++){
             atractoresTem.add(atractoresTod.get(i));
         }
         
    }
    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        // TODO add your handling code here:
        numIteraciones -=1;
        agregAtractTempo();
        
        if (numIteraciones==1){
            btnAnterior.setEnabled(false);
        }else
            btnAnterior.setEnabled(true);
        
        if(numIteraciones == kmeans3d.getNumIteraciones()){
            btnSiguiente.setEnabled(false);
        }else
            btnSiguiente.setEnabled(true);
        
        kmeans3d.atractoresNew = atractoresTem;
        kmeans3d.calculaDistancias();
        kmeans3d.calcNuevoCentroide();
        //comparaCentroides();
        //kmeans3d.pintaPuntos2();
        kmeans3d.pintaPuntos2(numIteraciones);
    }//GEN-LAST:event_btnAnteriorActionPerformed

    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
        // TODO add your handling code here:
        numIteraciones +=1;
        agregAtractTempo();
        if (numIteraciones==1){
            btnAnterior.setEnabled(false);
        }else
            btnAnterior.setEnabled(true);
        if(numIteraciones == kmeans3d.getNumIteraciones()){
            btnSiguiente.setEnabled(false);
        }else
            btnSiguiente.setEnabled(true);
        
        
        kmeans3d.atractoresNew = atractoresTem;
        kmeans3d.calculaDistancias();
        kmeans3d.calcNuevoCentroide();
        kmeans3d.pintaPuntos2(numIteraciones);
    }//GEN-LAST:event_btnSiguienteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAleatorio;
    private javax.swing.JButton btnAnadir;
    public static javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnGenPuntos;
    private javax.swing.JButton btnInicio;
    private javax.swing.JButton btnLimpia;
    private javax.swing.JButton btnOk;
    public static javax.swing.JButton btnSiguiente;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JComboBox<String> jcbDistancia;
    private javax.swing.JTextField jtfNumClases;
    private javax.swing.JTextField jtfNumPuntos;
    private javax.swing.JTextField jtfX;
    private javax.swing.JTextField jtfY;
    private javax.swing.JTextField jtfZ;
    private javax.swing.JLabel lblIngrese;
    private javax.swing.JLabel lblKClass;
    private javax.swing.JLabel lblNumPuntos;
    private javax.swing.JLabel lblX;
    private javax.swing.JLabel lblY;
    private javax.swing.JLabel lblZ;
    private javax.swing.JPanel p1;
    private javax.swing.JPanel p3;
    public static org.math.plot.Plot3DPanel plot3DPanel1;
    public static java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables
    private MedidasPlano mp;
    public static double xmin, xmax, ymin, ymax, zmin, zmax;
    public static double[] x,y,z;
    public static int k, numPuntos,numIteraciones, comPuntos=0;
    public static Color colAct;
    public static ArrayList<Color> colores;
    public static ArrayList<Point3D> atractores = new ArrayList<Point3D>();
    public static ArrayList<Point3D> atractoresTod = new ArrayList<Point3D>();
    public static ArrayList<Point3D> atractoresTem;
    private TextPrompt xLim, yLim, zLim, ub;
    private boolean esAleat;
    private KMeans3D kmeans3d;

}
